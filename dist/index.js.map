{"version":3,"sources":["../index.js"],"names":["Log","logname","showLog","exposeMethods","name","alias","icon","undefined","availableMethods","methods","map","method","oldConsole","console","args","unshift","apply","mayShow","newMethods","Object","assign"],"mappings":";;;;;;;;;;;;IAAqBA,G;;AAEjB;;;;;;;;;AASA,eAAYC,OAAZ,EAAqBC,OAArB,EAA6B;AAAA;;AACzB,SAAKD,OAAL,GAAeA,WAAW,UAA1B;AACA,WAAO,KAAKE,aAAL,CAAmBD,OAAnB,CAAP;AACH;;AAED;;;;;;;8BAGS;AACL,aAAO,CACH,EAAEE,MAAM,KAAR,EAAoBC,OAAO,GAA3B,EAAiCC,MAAM,IAAvC,EADG,EAEH,EAAEF,MAAM,MAAR,EAAoBC,OAAO,GAA3B,EAAiCC,MAAM,GAAvC,EAFG,EAGH,EAAEF,MAAM,OAAR,EAAoBC,OAAO,GAA3B,EAAiCC,MAAM,IAAvC,EAHG,EAIH,EAAEF,MAAM,MAAR,EAAoBC,OAAO,GAA3B,EAAiCC,MAAM,IAAvC,EAJG,EAKH,EAAEF,MAAM,OAAR,EAAoBC,OAAO,GAA3B,EAAiCC,MAAM,IAAvC,EALG,EAMH,EAAEF,MAAM,OAAR,EAAoBC,OAAO,IAA3B,EAAiCC,MAAM,IAAvC,EANG,EAOH,EAAEF,MAAM,UAAR,EAAoBC,OAAO,IAA3B,EAAiCC,MAAM,IAAvC,EAPG,EAQH,EAAEF,MAAM,MAAR,EAAoBC,OAAO,IAA3B,EAAiCC,MAAM,GAAvC,EARG,EASH,EAAEF,MAAM,SAAR,EAAoBC,OAAO,IAA3B,EAAiCC,MAAM,GAAvC,EATG,CAAP;AAUE;;;;;AAEN;;;;kCAIcJ,O,EAAQ;AAAA;;AAElB;;;AAGAA,kBAAYK,SAAZ,GAAwBL,UAAU,IAAlC,GAAyCA,OAAzC;;AAEA;;;;AAIA,UAAMM,mBAAmB,EAAzB;;AAEA;;;;AAIA,WAAKC,OAAL,GAAeC,GAAf,CAAmB,UAACC,MAAD,EAAY;AAAA;;AAE3B;;;AAGA,YAAMC,aAAaC,QAAQF,OAAOP,IAAf,CAAnB;;AAEA;;;;AAIAS,gBAAQF,OAAOP,IAAf,IAAuB,YAAa;AAAA,4CAATU,IAAS;AAATA,gBAAS;AAAA;;AAChCA,eAAKC,OAAL,SAAmBJ,OAAOL,IAA1B,SAAkC,MAAKL,OAAvC;AACAW,qBAAWI,KAAX,CAAiB,IAAjB,EAAuBF,IAAvB;AACH,SAHD;;AAKA;;;;AAIA,YAAMG,UAAU,SAAVA,OAAU,GAAK;AACjB,iBAAOf,UACDW,QAAQF,OAAOP,IAAf,CADC,GAED,YAAM,CAAE,CAFd;AAGH,SAJD;;AAMA;;;;AAIA,YAAMc,6DACDP,OAAOP,IADN,EACaa,SADb,gCAEDN,OAAON,KAFN,EAEcY,SAFd,eAAN;;AAKA;;;;;AAKAE,eAAOC,MAAP,CAAcZ,gBAAd,EAAgCU,UAAhC;AACH,OAzCD;;AA2CA,aAAOV,gBAAP;AACH;;;;;;kBAjGgBR,G","file":"index.js","sourcesContent":["export default class Log{\n\n    /*\n     * Class' constructor.\n     * @Params:\n     *  logname @string\n     *  showGog @boolean\n     *\n     * @Returns:\n     *  @Object\n     */\n    constructor(logname, showLog){\n        this.logname = logname || 'Lite-log';\n        return this.exposeMethods(showLog);\n    }\n\n    /*\n     * Methods currently supported by lite-log\n     */\n    methods(){\n        return [\n            { name: 'log'     , alias: 'l' , icon: '👀' },\n            { name: 'warn'    , alias: 'w' , icon: '✋' },\n            { name: 'error'   , alias: 'e' , icon: '‼️' },\n            { name: 'info'    , alias: 'i' , icon: 'ℹ️' },\n            { name: 'count'   , alias: 'c' , icon: '✏️' },\n            { name: 'group'   , alias: 'gs', icon: '☀️' },\n            { name: 'groupEnd', alias: 'ge', icon: '⛅️' },\n            { name: 'time'    , alias: 'ts', icon: '⏱' },\n            { name: 'timeEnd' , alias: 'te', icon: '⏰' }\n        ]};\n\n    /*\n     * Expose supported methods by\n     * overriding default console.\n     */\n    exposeMethods(showLog){\n\n        /*\n         * Should show logs?\n         */\n        showLog === undefined ? showLog = true : showLog;\n\n        /*\n         * Declare available methods as empty object.\n         * It will be filled after the loop.\n         */\n        const availableMethods = {};\n\n        /*\n         * Apply basic styling to logs and assign\n         * a new logging method looping the methods() function.\n         */\n        this.methods().map((method) => {\n\n            /*\n             * Get browser's default console instance.\n             */\n            const oldConsole = console[method.name];\n\n            /*\n             * Override default console behavior.\n             * Add style to console output and write instance reference (logname).\n             */\n            console[method.name] = (...args) => {\n                args.unshift(`[~ ${method.icon} ${this.logname} ~] `);\n                oldConsole.apply(null, args)\n            };\n\n            /*\n             * Should the log to be displayed?\n             * if false, point to null function.\n             */\n            const mayShow = () =>{\n                return showLog\n                    ? console[method.name]\n                    : () => {};\n            };\n\n            /*\n             * Define if default methods and aliases\n             * can be displayed.\n             */\n            const newMethods = {\n                [method.name]: mayShow(),\n                [method.alias]: mayShow()\n            };\n\n            /*\n             * Finally merge objects into an unique\n             * object to be exposed to the user,\n             * then end mapping.\n             */\n            Object.assign(availableMethods, newMethods);\n        });\n\n        return availableMethods;\n    }\n\n}\n"]}