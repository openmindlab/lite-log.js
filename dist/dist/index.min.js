"use strict";
Object.defineProperty(exports, "__esModule", { value: !0 });var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
  };
}();function _defineProperty(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }) : obj[key] = value, obj;
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}var Log = function () {
  function Log(logname, showLog) {
    return _classCallCheck(this, Log), this.logname = logname || "Lite-log", this.exposeMethods(showLog);
  }return _createClass(Log, [{ key: "methods", value: function value() {
      return [{ name: "log", alias: "l", icon: "👀" }, { name: "warn", alias: "w", icon: "✋" }, { name: "error", alias: "e", icon: "‼️" }, { name: "info", alias: "i", icon: "ℹ️" }, { name: "count", alias: "c", icon: "✏️" }, { name: "group", alias: "gs", icon: "☀️" }, { name: "groupEnd", alias: "ge", icon: "⛅️" }, { name: "time", alias: "ts", icon: "⏱" }, { name: "timeEnd", alias: "te", icon: "⏰" }];
    } }, { key: "exposeMethods", value: function value(showLog) {
      var _this = this;void 0 === showLog && (showLog = !0);var availableMethods = {};return this.methods().map(function (method) {
        var _newMethods,
            oldConsole = console[method.name];console[method.name] = function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }args.unshift("[~ " + method.icon + " " + _this.logname + " ~] "), oldConsole.apply(null, args);
        };var mayShow = function mayShow() {
          return showLog ? console[method.name] : function () {};
        },
            newMethods = (_defineProperty(_newMethods = {}, method.name, mayShow()), _defineProperty(_newMethods, method.alias, mayShow()), _newMethods);Object.assign(availableMethods, newMethods);
      }), availableMethods;
    } }]), Log;
}();exports.default = Log;
//# sourceMappingURL=index.min.js.map